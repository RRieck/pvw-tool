#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StartUp.Datenhaltung
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class SQLDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbteilung(Abteilung instance);
    partial void UpdateAbteilung(Abteilung instance);
    partial void DeleteAbteilung(Abteilung instance);
    partial void InsertPersonal(Personal instance);
    partial void UpdatePersonal(Personal instance);
    partial void DeletePersonal(Personal instance);
    #endregion
		
		public SQLDataDataContext() : 
				base(global::StartUp.Properties.Settings.Default.DataSourceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abteilung> Abteilung
		{
			get
			{
				return this.GetTable<Abteilung>();
			}
		}
		
		public System.Data.Linq.Table<Personal> Personal
		{
			get
			{
				return this.GetTable<Personal>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abteilung")]
	public partial class Abteilung : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _abteilung_id;
		
		private string _name;
		
		private EntityRef<Personal> _Personal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onabteilung_idChanging(string value);
    partial void Onabteilung_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Abteilung()
		{
			this._Personal = default(EntityRef<Personal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abteilung_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string abteilung_id
		{
			get
			{
				return this._abteilung_id;
			}
			set
			{
				if ((this._abteilung_id != value))
				{
					if (this._Personal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onabteilung_idChanging(value);
					this.SendPropertyChanging();
					this._abteilung_id = value;
					this.SendPropertyChanged("abteilung_id");
					this.Onabteilung_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personal_Abteilung", Storage="_Personal", ThisKey="abteilung_id", OtherKey="abteilung_id", IsForeignKey=true)]
		public Personal Personal
		{
			get
			{
				return this._Personal.Entity;
			}
			set
			{
				Personal previousValue = this._Personal.Entity;
				if (((previousValue != value) 
							|| (this._Personal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Personal.Entity = null;
						previousValue.Abteilung.Remove(this);
					}
					this._Personal.Entity = value;
					if ((value != null))
					{
						value.Abteilung.Add(this);
						this._abteilung_id = value.abteilung_id;
					}
					else
					{
						this._abteilung_id = default(string);
					}
					this.SendPropertyChanged("Personal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Personal")]
	public partial class Personal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _personal_nr;
		
		private string _vname;
		
		private string _nname;
		
		private string _abteilung_id;
		
		private EntitySet<Abteilung> _Abteilung;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpersonal_nrChanging(string value);
    partial void Onpersonal_nrChanged();
    partial void OnvnameChanging(string value);
    partial void OnvnameChanged();
    partial void OnnnameChanging(string value);
    partial void OnnnameChanged();
    partial void Onabteilung_idChanging(string value);
    partial void Onabteilung_idChanged();
    #endregion
		
		public Personal()
		{
			this._Abteilung = new EntitySet<Abteilung>(new Action<Abteilung>(this.attach_Abteilung), new Action<Abteilung>(this.detach_Abteilung));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_personal_nr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string personal_nr
		{
			get
			{
				return this._personal_nr;
			}
			set
			{
				if ((this._personal_nr != value))
				{
					this.Onpersonal_nrChanging(value);
					this.SendPropertyChanging();
					this._personal_nr = value;
					this.SendPropertyChanged("personal_nr");
					this.Onpersonal_nrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vname", DbType="VarChar(50)")]
		public string vname
		{
			get
			{
				return this._vname;
			}
			set
			{
				if ((this._vname != value))
				{
					this.OnvnameChanging(value);
					this.SendPropertyChanging();
					this._vname = value;
					this.SendPropertyChanged("vname");
					this.OnvnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nname", DbType="VarChar(50)")]
		public string nname
		{
			get
			{
				return this._nname;
			}
			set
			{
				if ((this._nname != value))
				{
					this.OnnnameChanging(value);
					this.SendPropertyChanging();
					this._nname = value;
					this.SendPropertyChanged("nname");
					this.OnnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_abteilung_id", DbType="VarChar(50)", CanBeNull=false)]
		public string abteilung_id
		{
			get
			{
				return this._abteilung_id;
			}
			set
			{
				if ((this._abteilung_id != value))
				{
					this.Onabteilung_idChanging(value);
					this.SendPropertyChanging();
					this._abteilung_id = value;
					this.SendPropertyChanged("abteilung_id");
					this.Onabteilung_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Personal_Abteilung", Storage="_Abteilung", ThisKey="abteilung_id", OtherKey="abteilung_id")]
		public EntitySet<Abteilung> Abteilung
		{
			get
			{
				return this._Abteilung;
			}
			set
			{
				this._Abteilung.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Abteilung(Abteilung entity)
		{
			this.SendPropertyChanging();
			entity.Personal = this;
		}
		
		private void detach_Abteilung(Abteilung entity)
		{
			this.SendPropertyChanging();
			entity.Personal = null;
		}
	}
}
#pragma warning restore 1591
